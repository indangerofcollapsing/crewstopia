# Title for the HIF.
Title: _template

# Add the PrC pack version and specify at minimum NWN version to install.
Version:
MinNWNVersion: 1.69, XP1, XP2

module.Hak : dac_en6.hak

# HIF files may consist of any of the following tags.  All tags are optional.
# Tags that support multiple data items may have the data comma separated and/or
# may have multiple entries.  If a multiple entries are given for a tag that
# only supports 1 value then the fist value in the file is used.  Blank lines
# are ignored as are lines starting with a '#'.
#
# Tag format is
#
# <tag> : <value1>, <value2>, ..., <valuen>
#
# All white space is optional, and tags may also be given on multiple lines
# as follows:
#
# <tag> : <value1>
# <tag> : <value2>
# ...
# <tag> : <valuen>
#
# The following tags are supported:
#
# Title : Allows you to specify the title for the HIF, if the installer is run
#    in single HIF mode then the installer's title bar will have the HIF's
#    title, or file name if the HIF has no title.  The format of the title
#    is <HIF TITLE> Module Updater <HIF VERSION>
# Version : Allows you to specify the version number for your content.  Modules
#    that the HIF is added to are tagged with the version number.
# MinNWNVersion : Allows you to specify the minimum version of NWN that is
#    required, and whether your content requies XP1 or XP2.  For the NWN version
#    use the standard format, i.e. 1.62, 1.31, etc.  For the Expansions use XP1
#    or Undrentide for SoU and XP2 or Underdark for HotU.  If you list multiple
#    requirements separate them by commas.  For example:
#        MinNWNVersion : 1.62, XP1, XP2
#    will make your content require NWN 1.62 or later and both expansions.
# erf : [erfname].erf
#    Imports the listed erf files into the module
# module.Hak : [hakname].hak
#    Add hak(s) to add to the module
# module.CustomTlk : [tlkfile].tlk
#    Custom tlk file for the module, only 1 value.
# module.Cache : [scriptname] (without extension)
#    Adds the given scripts the module's script cache.
# module.Areas: Adds the given ResRefs to the module's area list.
# module.OnAcquireItem : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnActivateItem : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnClientEnter : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnClientLeave : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnCutsceneAbort : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnHeartbeat : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnModuleLoad : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnModuleStart : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnPlayerDeath : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnPlayerDying : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnPlayerEquipItem : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnPlayerLevelUp : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnPlayerRest : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnPlayerUnEquipItem : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnPlayerRespawn : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnUnaquireItem : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
# module.OnUserDefined : [scriptname] (without extension)
#    Assigns script(s) to handle this module event
