#include "ohs_i0_treehawk"
#include "ohs_i0_commands"

int StartingConditional()
{
  object oPC = GetPCSpeaker();
  object oAltar = OBJECT_SELF;
  string sName = GetName(oPC);
  string sDatabaseName = "OHS_PLAYER_"+GetPCPlayerName(oPC);
  location lSpot = GetLocation(OBJECT_SELF);
  object oClone = RetrieveCampaignObject(sDatabaseName,sName,lSpot);
  if (!GetIsObjectValid(oClone)) return FALSE;

  effect eInvis = EffectVisualEffect(VFX_DUR_CUTSCENE_INVISIBILITY);
  ApplyEffectToObject(DURATION_TYPE_PERMANENT,eInvis,oClone);
  ChangeToStandardFaction(oClone,STANDARD_FACTION_DEFENDER);
  AssignCommand(oClone,SetIsDestroyable(TRUE,FALSE,FALSE));

  RecallLocals(sDatabaseName,oClone,oPC,TRUE);

  // Added in V1.4.4 :
  // If a companion was instructed not to automatically level up in-game
  // we just transfer XP but not levels so that characters can be retrospectively
  // recreated with manually chosen feats/skills/spells etc as desired.
  int bDummy;
  if (GetLocalInt(oPC,"OHS_LEVELUP_POLICY")>=0)
  {
    bDummy = TransferLevels(oClone,oPC);
  }
  else if (GetXP(oClone)>GetXP(oPC))
  {
    SetXP(oPC,GetXP(oClone));
  }

  // Added for NWN 1.67 :
  // Copy physical characteristics and portrait across from clone to PC
  SetCreatureAppearanceType(oPC,GetAppearanceType(oClone));
  SetPhenoType(GetPhenoType(oClone),oPC);
  SetCreatureWingType(GetCreatureWingType(oClone),oPC);
  SetCreatureTailType(GetCreatureTailType(oClone),oPC);
  SetCreatureBodyPart(CREATURE_PART_HEAD,GetCreatureBodyPart(CREATURE_PART_HEAD,oClone),oPC);
  int nPart;
  for (nPart=0;nPart<=17;nPart++)
  {
    SetCreatureBodyPart(nPart,GetCreatureBodyPart(nPart,oClone),oPC);
  }
  SetPortraitResRef(oPC,GetPortraitResRef(oClone));

  // V1.4.5: Adjust alignment of PC to equal clone
  int iDiff;
  iDiff = GetLawChaosValue(oClone)-GetLawChaosValue(oPC);
  if (iDiff>0) AdjustAlignment(oPC,ALIGNMENT_LAWFUL,iDiff);
  else if (iDiff<0) AdjustAlignment(oPC,ALIGNMENT_CHAOTIC,-iDiff);
  iDiff = GetGoodEvilValue(oClone)-GetGoodEvilValue(oPC);
  if (iDiff>0) AdjustAlignment(oPC,ALIGNMENT_GOOD,iDiff);
  else if (iDiff<0) AdjustAlignment(oPC,ALIGNMENT_EVIL,-iDiff);

  // Empty the Altar's Inventory
  object oItem;
  oItem = GetFirstItemInInventory(oAltar);
  while (GetIsObjectValid(oItem))
  {
    DestroyObject(oItem);
    oItem = GetNextItemInInventory(oAltar);
  }

  // Copy oClone's equipment onto the PC
  AssignCommand(oPC,SetCommandable(TRUE,oPC));
  int nSlot;
  object oDestItem;
  for (nSlot=0; nSlot<=NUM_INVENTORY_SLOTS; nSlot++)
  {
    oItem = GetItemInSlot(nSlot,oClone);
    if (GetIsObjectValid(oItem))
    {
      oDestItem = CopyItem(oItem,oPC,TRUE);
      AssignCommand(oPC,ActionEquipItem(oDestItem,nSlot));
      AssignCommand(oPC,ActionWait(0.55));
    }
  }
  AssignCommand(oPC,SetCommandable(FALSE,oPC));

  // Move oClone's inventory into the Altar.
  oItem = GetFirstItemInInventory(oClone);
  while (GetIsObjectValid(oItem))
  {
    ActionTakeItem(oItem,oClone);
    ActionDoCommand(SetItemCursedFlag(oItem,FALSE));
    oItem = GetNextItemInInventory(oClone);
  }

  // Adjust Gold
  int nGoldPC = GetGold(oPC);
  int nGoldClone = GetGold(oClone);
  if (nGoldPC>nGoldClone) TakeGoldFromCreature(nGoldPC-nGoldClone,oPC,TRUE);
  else if (nGoldClone>nGoldPC) GiveGoldToCreature(oPC,nGoldClone-nGoldPC);

  // Destroy the Clone
  ActionDoCommand(DestroyObject(oClone,5.0f));

  OHS_SetCompanion(oPC);
  SetLocalInt(oPC,"OHS_TEMPLE_STATUS",1+GetLocalInt(oPC,"OHS_TEMPLE_STATUS"));

  return TRUE;
}

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// (C) 2004, 2005, 2006 by bob@minors-ranton.fsnet.co.uk (aka "OldMansBeard")         //
//                                                                                    //
// The NWScript source code file to which this notice is attached is copyright.       //
// It may not be published or passed to a third party in part or in whole modified    //
// or unmodified without the express consent of the copyright holder.                 //
//                                                                                    //
// NWN byte code generated by compiling it or variations of it may be published       //
// or otherwise distributed notwithstanding under the terms of the Bioware EULA.      //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////


