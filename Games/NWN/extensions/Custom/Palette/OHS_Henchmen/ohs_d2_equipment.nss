// Check if caller is carrying better equipment than presently adopted
// Modified by DonTheDime 2005-03-15 to add off-hand weapons for dual-wield

#include "ohs_i0_common"
int StartingConditional()
{
  int bResult = FALSE;
  object oFavourite, oBest;
  int bMainWeaponOkay;

  // Unlock armour - retrofix for pre-1.4 henchmen
  object oArmour = GetItemInSlot(INVENTORY_SLOT_CHEST);
  if (oArmour!=GetLocalObject(OBJECT_SELF,"OHS_SURETY"))
  {
    SetItemCursedFlag(oArmour,FALSE);
    SetDroppableFlag(oArmour,FALSE);
  }
  else // Just in case ...
  {
    SetItemCursedFlag(oArmour,TRUE);
    SetDroppableFlag(oArmour,TRUE);
  }

  // Check Melee Weapons
  oFavourite = GetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_MELEE_WEAPON");
  oBest = GetBestMeleeWeapon();
  if (!GetIsObjectValid(oFavourite) || GetItemPossessor(oFavourite)!=OBJECT_SELF || !IsRightSize(oFavourite))
  {
    SetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_MELEE_WEAPON",oBest);
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_MELEE_WEAPON",OBJECT_INVALID);
    bMainWeaponOkay = TRUE;
  }
  else if (oBest!=oFavourite)
  {
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_MELEE_WEAPON",oBest);
    bMainWeaponOkay = FALSE;
    bResult = TRUE;
  }
  else
  {
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_MELEE_WEAPON",OBJECT_INVALID);
    bMainWeaponOkay = TRUE;
  }

  // Check Ranged Weapons
  oFavourite = GetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_RANGED_WEAPON");
  oBest = GetBestRangedWeapon();
  if (!GetIsObjectValid(oFavourite) || GetItemPossessor(oFavourite)!=OBJECT_SELF)
  {
    SetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_RANGED_WEAPON",oBest);
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_RANGED_WEAPON",OBJECT_INVALID);
  }
  else if (oBest!=oFavourite)
  {
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_RANGED_WEAPON",oBest);
    bResult = TRUE;
  }
  else
  {
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_RANGED_WEAPON",OBJECT_INVALID);
  }

  // Check Shields
  oFavourite = GetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_SHIELD");
  oBest = GetBestShield();
  if (!GetIsObjectValid(oFavourite) || GetItemPossessor(oFavourite)!=OBJECT_SELF)
  {
    SetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_SHIELD",oBest);
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_SHIELD",OBJECT_INVALID);
  }
  else if (oBest!=oFavourite)
  {
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_SHIELD",oBest);
    bResult = TRUE;
  }
  else
  {
    SetLocalObject(OBJECT_SELF,"OHS_BETTER_SHIELD",OBJECT_INVALID);
  }

  // Check Light Melee Weapons (OffHand Weapon for Dual Wielders) if dual-wield
  // melee style preference has been set. Added by DonTheDime (2005-03-15).
  // OMB - only do this if main weapon is satisfactory otherwise instability can result
  SetLocalObject(OBJECT_SELF,"OHS_BETTER_MELEE_OFFHAND",OBJECT_INVALID);
  int nStyle=GetLocalInt(OBJECT_SELF, "OHS_MELEE_PREF");
  if (nStyle==OHS_STYLE_DUAL_WIELD && bMainWeaponOkay)
  {
    object oMainWeapon = GetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_MELEE_WEAPON");
    oFavourite = GetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_MELEE_OFFHAND");
    oBest = GetBestOffHandWeapon(oMainWeapon);

    if (!GetIsObjectValid(oFavourite) || GetItemPossessor(oFavourite)!=OBJECT_SELF || !IsLightWeapon(oFavourite) || oFavourite==oMainWeapon)
    {
      SetLocalObject(OBJECT_SELF,"OHS_FAVOURITE_MELEE_OFFHAND",oBest);
    }
    else if (oBest!=oFavourite)
    {
      SetLocalObject(OBJECT_SELF,"OHS_BETTER_MELEE_OFFHAND",oBest);
      bResult = TRUE;
    }
  }

  return bResult;
}

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// (C) 2004, 2005, 2006 by bob@minors-ranton.fsnet.co.uk (aka "OldMansBeard")         //
//                                                                                    //
// The NWScript source code file to which this notice is attached is copyright.       //
// It may not be published or passed to a third party in part or in whole modified    //
// or unmodified without the express consent of the copyright holder.                 //
//                                                                                    //
// NWN byte code generated by compiling it or variations of it may be published       //
// or otherwise distributed notwithstanding under the terms of the Bioware EULA.      //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

