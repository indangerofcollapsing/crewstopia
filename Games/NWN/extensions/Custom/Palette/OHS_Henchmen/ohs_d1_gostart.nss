#include "x0_i0_henchman"

void TellLinkBoyMasterFiredMe(object oMaster)
{
  object oLinkboy = GetLocalObject(oMaster,"OHS_O_MY_LINKBOY");
  if (GetIsObjectValid(oLinkboy))
  {
    string sTagList = GetLocalString(oLinkboy,"OHS_PARTY_TAGLIST");
    string sMyTag = ","+GetTag(OBJECT_SELF)+",";
    int iIndex = FindSubString(sTagList,sMyTag);
    if (iIndex>=0)
    {
      sTagList = GetStringLeft(sTagList,iIndex)+GetStringRight(sTagList,GetStringLength(sTagList)-iIndex-GetStringLength(sMyTag));
      SetLocalString(oLinkboy,"OHS_PARTY_TAGLIST",sTagList);
    }
  }
}

void main()
{
  // V1.5.1: Get lTarget before FireHenchman loses the information
  location lTarget = GetAssociateStartLocation();
  if (!GetIsObjectValid(GetAreaFromLocation(lTarget))) lTarget = GetStartingLocation();

  FireHenchman(GetPCSpeaker(),OBJECT_SELF);
  ChangeToStandardFaction(OBJECT_SELF,STANDARD_FACTION_MERCHANT);
  // V1.4.4: Exceptionally, if Defenders are hostile to Merchants
  // (e.g. in PotSC) join the Defenders instead
  if (GetStandardFactionReputation(STANDARD_FACTION_DEFENDER)<=10)
  {
    ChangeToStandardFaction(OBJECT_SELF,STANDARD_FACTION_DEFENDER);
  }
  TellLinkBoyMasterFiredMe(GetPCSpeaker());
  DeleteLocalString(OBJECT_SELF,"OHS_S_MY_MASTER");

  SetCommandable(TRUE);
  ClearAllActions();
  int nNth=1;
  object oDoor = GetNearestObject(OBJECT_TYPE_DOOR,OBJECT_SELF,nNth);
  while (GetIsObjectValid(oDoor) && GetLocked(oDoor))
  {
    nNth++;
    oDoor = GetNearestObject(OBJECT_TYPE_DOOR,OBJECT_SELF,nNth);
  }
  if (GetIsObjectValid(oDoor))
  {
    ActionMoveToObject(oDoor,FALSE);
    if (!GetIsOpen(oDoor)) ActionOpenDoor(oDoor);
  }
  ActionJumpToLocation(lTarget);
}

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// (C) 2004, 2005, 2006 by bob@minors-ranton.fsnet.co.uk (aka "OldMansBeard")         //
//                                                                                    //
// The NWScript source code file to which this notice is attached is copyright.       //
// It may not be published or passed to a third party in part or in whole modified    //
// or unmodified without the express consent of the copyright holder.                 //
//                                                                                    //
// NWN byte code generated by compiling it or variations of it may be published       //
// or otherwise distributed notwithstanding under the terms of the Bioware EULA.      //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////


